// Mocks generated by Mockito 5.2.0 from annotations
// in my_notes/test/utils/injection_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:my_notes/core/error/failure.dart' as _i7;
import 'package:my_notes/features/note/data/datasources/note_local_datasource.dart'
    as _i3;
import 'package:my_notes/features/note/data/models/note_model.dart' as _i5;
import 'package:my_notes/features/note/domain/entities/note.dart' as _i8;
import 'package:my_notes/features/note/domain/repositories/note_repository.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [NoteLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteLocalDataSource extends _i1.Mock
    implements _i3.NoteLocalDataSource {
  MockNoteLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.NoteModel>> getNotes() =>
      (super.noSuchMethod(Invocation.method(#getNotes, []),
              returnValue: Future<List<_i5.NoteModel>>.value(<_i5.NoteModel>[]))
          as _i4.Future<List<_i5.NoteModel>>);
  @override
  _i4.Future<bool> addNote(_i5.NoteModel? note) =>
      (super.noSuchMethod(Invocation.method(#addNote, [note]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> editNote(_i5.NoteModel? note) =>
      (super.noSuchMethod(Invocation.method(#editNote, [note]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> deleteNote(_i5.NoteModel? note) =>
      (super.noSuchMethod(Invocation.method(#deleteNote, [note]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}

/// A class which mocks [NoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteRepository extends _i1.Mock implements _i6.NoteRepository {
  MockNoteRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i7.Failure, List<_i8.Note>>> getNotes() =>
      (super.noSuchMethod(Invocation.method(#getNotes, []),
          returnValue: Future<_i2.Either<_i7.Failure, List<_i8.Note>>>.value(
              _FakeEither_0<_i7.Failure, List<_i8.Note>>())) as _i4
          .Future<_i2.Either<_i7.Failure, List<_i8.Note>>>);
  @override
  _i4.Future<_i2.Either<_i7.Failure, bool>> addNote(_i8.Note? note) =>
      (super.noSuchMethod(Invocation.method(#addNote, [note]),
              returnValue: Future<_i2.Either<_i7.Failure, bool>>.value(
                  _FakeEither_0<_i7.Failure, bool>()))
          as _i4.Future<_i2.Either<_i7.Failure, bool>>);
  @override
  _i4.Future<_i2.Either<_i7.Failure, bool>> editNote(_i8.Note? note) =>
      (super.noSuchMethod(Invocation.method(#editNote, [note]),
              returnValue: Future<_i2.Either<_i7.Failure, bool>>.value(
                  _FakeEither_0<_i7.Failure, bool>()))
          as _i4.Future<_i2.Either<_i7.Failure, bool>>);
  @override
  _i4.Future<_i2.Either<_i7.Failure, bool>> deleteNote(_i8.Note? note) =>
      (super.noSuchMethod(Invocation.method(#deleteNote, [note]),
              returnValue: Future<_i2.Either<_i7.Failure, bool>>.value(
                  _FakeEither_0<_i7.Failure, bool>()))
          as _i4.Future<_i2.Either<_i7.Failure, bool>>);
}
